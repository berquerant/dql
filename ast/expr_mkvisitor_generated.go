// Code generated by "mkvisitor -type OrExpr,AndExpr,XorExpr,NotExpr,BoolPrimaryComparison,BoolPrimaryPredicate,Exprs,PredicateIn,PredicateBetween,PredicateLike,PredicateBitExpr,BitExprBitOp,BitExprArtOp,BitExprSimpleExpr,SimpleExprPrefixOp,SimpleExprLit,Ident,FunctionCall,SimpleExprExpr,IntLit,FloatLit,StringLit -vType ExprVisitor -output expr_mkvisitor_generated.go"; DO NOT EDIT.

package ast

import "fmt"

type ExprVisitor interface {
	VisitOrExpr(*OrExpr)
	VisitAndExpr(*AndExpr)
	VisitXorExpr(*XorExpr)
	VisitNotExpr(*NotExpr)
	VisitBoolPrimaryComparison(*BoolPrimaryComparison)
	VisitBoolPrimaryPredicate(*BoolPrimaryPredicate)
	VisitExprs(*Exprs)
	VisitPredicateIn(*PredicateIn)
	VisitPredicateBetween(*PredicateBetween)
	VisitPredicateLike(*PredicateLike)
	VisitPredicateBitExpr(*PredicateBitExpr)
	VisitBitExprBitOp(*BitExprBitOp)
	VisitBitExprArtOp(*BitExprArtOp)
	VisitBitExprSimpleExpr(*BitExprSimpleExpr)
	VisitSimpleExprPrefixOp(*SimpleExprPrefixOp)
	VisitSimpleExprLit(*SimpleExprLit)
	VisitIdent(*Ident)
	VisitFunctionCall(*FunctionCall)
	VisitSimpleExprExpr(*SimpleExprExpr)
	VisitIntLit(*IntLit)
	VisitFloatLit(*FloatLit)
	VisitStringLit(*StringLit)
}

func (s *OrExpr) Accept(v ExprVisitor)                { v.VisitOrExpr(s) }
func (s *AndExpr) Accept(v ExprVisitor)               { v.VisitAndExpr(s) }
func (s *XorExpr) Accept(v ExprVisitor)               { v.VisitXorExpr(s) }
func (s *NotExpr) Accept(v ExprVisitor)               { v.VisitNotExpr(s) }
func (s *BoolPrimaryComparison) Accept(v ExprVisitor) { v.VisitBoolPrimaryComparison(s) }
func (s *BoolPrimaryPredicate) Accept(v ExprVisitor)  { v.VisitBoolPrimaryPredicate(s) }
func (s *Exprs) Accept(v ExprVisitor)                 { v.VisitExprs(s) }
func (s *PredicateIn) Accept(v ExprVisitor)           { v.VisitPredicateIn(s) }
func (s *PredicateBetween) Accept(v ExprVisitor)      { v.VisitPredicateBetween(s) }
func (s *PredicateLike) Accept(v ExprVisitor)         { v.VisitPredicateLike(s) }
func (s *PredicateBitExpr) Accept(v ExprVisitor)      { v.VisitPredicateBitExpr(s) }
func (s *BitExprBitOp) Accept(v ExprVisitor)          { v.VisitBitExprBitOp(s) }
func (s *BitExprArtOp) Accept(v ExprVisitor)          { v.VisitBitExprArtOp(s) }
func (s *BitExprSimpleExpr) Accept(v ExprVisitor)     { v.VisitBitExprSimpleExpr(s) }
func (s *SimpleExprPrefixOp) Accept(v ExprVisitor)    { v.VisitSimpleExprPrefixOp(s) }
func (s *SimpleExprLit) Accept(v ExprVisitor)         { v.VisitSimpleExprLit(s) }
func (s *Ident) Accept(v ExprVisitor)                 { v.VisitIdent(s) }
func (s *FunctionCall) Accept(v ExprVisitor)          { v.VisitFunctionCall(s) }
func (s *SimpleExprExpr) Accept(v ExprVisitor)        { v.VisitSimpleExprExpr(s) }
func (s *IntLit) Accept(v ExprVisitor)                { v.VisitIntLit(s) }
func (s *FloatLit) Accept(v ExprVisitor)              { v.VisitFloatLit(s) }
func (s *StringLit) Accept(v ExprVisitor)             { v.VisitStringLit(s) }

type ExprVisitorDefault struct{}

func (s *ExprVisitorDefault) VisitOrExpr(_ *OrExpr)                               {}
func (s *ExprVisitorDefault) VisitAndExpr(_ *AndExpr)                             {}
func (s *ExprVisitorDefault) VisitXorExpr(_ *XorExpr)                             {}
func (s *ExprVisitorDefault) VisitNotExpr(_ *NotExpr)                             {}
func (s *ExprVisitorDefault) VisitBoolPrimaryComparison(_ *BoolPrimaryComparison) {}
func (s *ExprVisitorDefault) VisitBoolPrimaryPredicate(_ *BoolPrimaryPredicate)   {}
func (s *ExprVisitorDefault) VisitExprs(_ *Exprs)                                 {}
func (s *ExprVisitorDefault) VisitPredicateIn(_ *PredicateIn)                     {}
func (s *ExprVisitorDefault) VisitPredicateBetween(_ *PredicateBetween)           {}
func (s *ExprVisitorDefault) VisitPredicateLike(_ *PredicateLike)                 {}
func (s *ExprVisitorDefault) VisitPredicateBitExpr(_ *PredicateBitExpr)           {}
func (s *ExprVisitorDefault) VisitBitExprBitOp(_ *BitExprBitOp)                   {}
func (s *ExprVisitorDefault) VisitBitExprArtOp(_ *BitExprArtOp)                   {}
func (s *ExprVisitorDefault) VisitBitExprSimpleExpr(_ *BitExprSimpleExpr)         {}
func (s *ExprVisitorDefault) VisitSimpleExprPrefixOp(_ *SimpleExprPrefixOp)       {}
func (s *ExprVisitorDefault) VisitSimpleExprLit(_ *SimpleExprLit)                 {}
func (s *ExprVisitorDefault) VisitIdent(_ *Ident)                                 {}
func (s *ExprVisitorDefault) VisitFunctionCall(_ *FunctionCall)                   {}
func (s *ExprVisitorDefault) VisitSimpleExprExpr(_ *SimpleExprExpr)               {}
func (s *ExprVisitorDefault) VisitIntLit(_ *IntLit)                               {}
func (s *ExprVisitorDefault) VisitFloatLit(_ *FloatLit)                           {}
func (s *ExprVisitorDefault) VisitStringLit(_ *StringLit)                         {}
func VisitSwitch(visitor ExprVisitor, v interface{}) {
	switch v := v.(type) {
	case *OrExpr:
		visitor.VisitOrExpr(v)
	case *AndExpr:
		visitor.VisitAndExpr(v)
	case *XorExpr:
		visitor.VisitXorExpr(v)
	case *NotExpr:
		visitor.VisitNotExpr(v)
	case *BoolPrimaryComparison:
		visitor.VisitBoolPrimaryComparison(v)
	case *BoolPrimaryPredicate:
		visitor.VisitBoolPrimaryPredicate(v)
	case *Exprs:
		visitor.VisitExprs(v)
	case *PredicateIn:
		visitor.VisitPredicateIn(v)
	case *PredicateBetween:
		visitor.VisitPredicateBetween(v)
	case *PredicateLike:
		visitor.VisitPredicateLike(v)
	case *PredicateBitExpr:
		visitor.VisitPredicateBitExpr(v)
	case *BitExprBitOp:
		visitor.VisitBitExprBitOp(v)
	case *BitExprArtOp:
		visitor.VisitBitExprArtOp(v)
	case *BitExprSimpleExpr:
		visitor.VisitBitExprSimpleExpr(v)
	case *SimpleExprPrefixOp:
		visitor.VisitSimpleExprPrefixOp(v)
	case *SimpleExprLit:
		visitor.VisitSimpleExprLit(v)
	case *Ident:
		visitor.VisitIdent(v)
	case *FunctionCall:
		visitor.VisitFunctionCall(v)
	case *SimpleExprExpr:
		visitor.VisitSimpleExprExpr(v)
	case *IntLit:
		visitor.VisitIntLit(v)
	case *FloatLit:
		visitor.VisitFloatLit(v)
	case *StringLit:
		visitor.VisitStringLit(v)
	default:
		panic(fmt.Sprintf("VisitSwitch cannot switch %#v", v))
	}
}
