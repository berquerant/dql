// Code generated by "marker -method IsNode,IsExpr -type OrExpr,AndExpr,XorExpr,NotExpr,BoolPrimaryComparison,BoolPrimaryPredicate,Exprs,PredicateIn,PredicateBetween,PredicateLike,PredicateBitExpr,BitExprBitOp,BitExprArtOp,BitExprSimpleExpr,SimpleExprPrefixOp,SimpleExprLit,Ident,FunctionCall,SimpleExprExpr -output expr_marker_generated.go"; DO NOT EDIT.

package ast

func (*OrExpr) IsNode()                {}
func (*OrExpr) IsExpr()                {}
func (*AndExpr) IsNode()               {}
func (*AndExpr) IsExpr()               {}
func (*XorExpr) IsNode()               {}
func (*XorExpr) IsExpr()               {}
func (*NotExpr) IsNode()               {}
func (*NotExpr) IsExpr()               {}
func (*BoolPrimaryComparison) IsNode() {}
func (*BoolPrimaryComparison) IsExpr() {}
func (*BoolPrimaryPredicate) IsNode()  {}
func (*BoolPrimaryPredicate) IsExpr()  {}
func (*Exprs) IsNode()                 {}
func (*Exprs) IsExpr()                 {}
func (*PredicateIn) IsNode()           {}
func (*PredicateIn) IsExpr()           {}
func (*PredicateBetween) IsNode()      {}
func (*PredicateBetween) IsExpr()      {}
func (*PredicateLike) IsNode()         {}
func (*PredicateLike) IsExpr()         {}
func (*PredicateBitExpr) IsNode()      {}
func (*PredicateBitExpr) IsExpr()      {}
func (*BitExprBitOp) IsNode()          {}
func (*BitExprBitOp) IsExpr()          {}
func (*BitExprArtOp) IsNode()          {}
func (*BitExprArtOp) IsExpr()          {}
func (*BitExprSimpleExpr) IsNode()     {}
func (*BitExprSimpleExpr) IsExpr()     {}
func (*SimpleExprPrefixOp) IsNode()    {}
func (*SimpleExprPrefixOp) IsExpr()    {}
func (*SimpleExprLit) IsNode()         {}
func (*SimpleExprLit) IsExpr()         {}
func (*Ident) IsNode()                 {}
func (*Ident) IsExpr()                 {}
func (*FunctionCall) IsNode()          {}
func (*FunctionCall) IsExpr()          {}
func (*SimpleExprExpr) IsNode()        {}
func (*SimpleExprExpr) IsExpr()        {}
